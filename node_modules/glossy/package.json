{
  "name": "glossy",
  "version": "0.1.4",
  "description": "Syslog parser and producer",
  "keywords": [
    "syslog",
    "logging"
  ],
  "url": "http://github.com/squeeks/glossy",
  "main": "./index.js",
  "author": {
    "name": "Squeeks",
    "email": "privacymyass@gmail.com"
  },
  "maintainers": [
    {
      "name": "Squeeks",
      "email": "privacymyass@gmail.com"
    }
  ],
  "contributors": [
    {
      "name": "artifi",
      "email": "artifipl@gmail.com"
    },
    {
      "name": "Matt Bornski",
      "email": "matt@bornski.com"
    },
    {
      "name": "Fyodor Y",
      "email": "fygrave@o0o.nu"
    },
    {
      "name": "Stan Carney",
      "email": "stan.carney@rootsh.me"
    }
  ],
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "scripts": {
    "test": "node test/runner.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/squeeks/glossy.git"
  },
  "bugs": {
    "url": "http://github.com/squeeks/glossy/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "engines": {
    "node": ">= 0.2.5"
  },
  "readme": "glossy\n===========\n\nglossy aims to be a very generic yet powerful library for both producing and\nalso parsing raw syslog messages. The library aims to be capable of adhearing to\nRFC 3164, RFC 5424 and RFC 5848 and by itself does no network interactions, it's\nup to you to use this library as a syslog producer, a consumer, relay or\nsomething else entirely. In addition, glossy has no dependencies and can be\nbootstrapped to operate in browser or other non-node.js environments.\n\n\nParsing\n-------\n\n    var syslogParser = require('glossy').Parse; // or wherever your glossy libs are\n    \n    parsedMessage = syslogParser.parse(message);\n\nparsedMessage will return an object containing as many parsed values as\npossible, as well as the original message. The date value will be a Date object.\nStructured data will return as an object. Alternatively, you can give it a\ncallback as your second argument:\n\n    syslogParser.parse(message, function(parsedMessage){\n        console.log(parsedMessage);\n    });\n\n\nProducing\n-------\nUnless you stipulate for BSD/RFC 3164 style messages, it will default to\ngenerating all messages as newer, RFC 5424 format. This might break consumers or\nrelays not expecting it.\n\n    var syslogProducer = require('glossy').Produce; // or wherever glossy lives\n    var glossy = new syslog.Producer({ type: 'BSD' });\n\n    var msg = glossy.produce({\n        facility: 'local4', // these can either be a valid integer, \n        severity: 'error',  // or a relevant string\n        host: 'localhost',\n        appName: 'sudo',\n        pid: '123',\n        date: new Date(Date()),\n        message: 'Nice, Neat, New, Oh Wow'\n    });\n\nAgain, you can specify a callback for the second argument.\n\n    var msg = glossy.produce({\n        facility: 'ntp', \n        severity: 'info',\n        host: 'localhost',\n        date: new Date(Date()),\n        message: 'Lunch Time!'\n    }, function(syslogMsg){\n        console.log(syslogMsg);\n    });\n\nIn addition, you can also predefined most of the values when you create the\nobject, to save having to repeat yourself:\n\n    var glossy = new syslog.Producer({\n        type: 'BSD',\n        facility: 'ftp',\n        pid: 42,\n        host: '::1'        \n    });\n\nFor RFC5424 messages, you can also include structured data. Keys should comply\nwith the definition in [Section 7, RFC5424](http://tools.ietf.org/html/rfc5424#section-7) \nregarding names - keep them unique and your own custom keys should have at least\nan @ sign.\n\n    var msg = glossy.produce({\n        facility: 'local4', \n        severity: 'error',\n        host: 'localhost',\n        appName: 'starman',\n        pid: '123',\n        date: new Date(Date()),\n        message: 'ACHTUNG!',\n        structuredData: {\n            'plack@host': {\n                status: 'broken',\n                hasTried: 'not really'\n            }\n        }\n    });\n\nFinally, we expose all the severities as functions themselves:\n\n    var infoMsg = glossy.info({\n           message: 'Info Message',\n    });\n\nFunction names facilitating this are named debug, info, notice, warn, crit,\nalert and emergency.\n\nParsing Example\n-------\nHandle incoming syslog messages coming in on UDP port 514:\n\n    var syslogParser = require('glossy').Parse; // or wherever your glossy libs are\n    var dgram  = require(\"dgram\");\n    var server = dgram.createSocket(\"udp4\");\n    \n    server.on(\"message\", function(rawMessage) {\n        syslogParser.parse(rawMessage.toString('utf8', 0), function(parsedMessage){\n            console.log(parsedMessage.host + ' - ' + parsedMessage.message);\n        });\n    });\n    \n    server.on(\"listening\", function() {\n        var address = server.address();\n        console.log(\"Server now listening at \" + \n            address.address + \":\" + address.port);\n    });\n    \n    server.bind(514); // Remember ports < 1024 need suid\n\n\nAuthor\n-------\nSqueeks - privacymyass@gmail.com\n\nLicense\n-------\nThis is free software licensed under the MIT License - see the LICENSE file that\nshould be included with this package.\n",
  "_id": "glossy@0.1.4",
  "_from": "glossy@0.x.x"
}
